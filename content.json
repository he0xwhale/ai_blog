{"meta":{"title":"AI whale","subtitle":"Exploring the World of AI","description":"A blog dedicated to AI, technology, and innovation.","author":"he0xwhale","url":"https://ai.he0xwhale.xyz","root":"/"},"pages":[{"title":"关于我","date":"2025-06-11T07:25:33.108Z","updated":"2025-06-11T07:25:33.108Z","comments":true,"path":"about/index.html","permalink":"https://ai.he0xwhale.xyz/about/index.html","excerpt":"","text":"你好，欢迎来到我的博客！ 我是一个热爱技术、乐于折腾的创作者，目前正在搭建并维护自己的 Hexo 博客，使用的是美观灵动的 Volantis 主题。在探索过程中，我对博客的图标、壁纸、Logo 设计等细节都有不少自定义和优化，比如尝试将 AI 编程与吉卜力风格相结合，营造一种温暖又有科技感的氛围。博客内容会围绕我感兴趣的领域展开，包括但不限于： 编程与技术实践 人工智能与应用探索 静态博客优化技巧 开源工具使用心得 我希望这个博客不仅是我的知识笔记和成长记录，也能成为你参考或交流的一个起点。如果你对博客内容有建议，欢迎通过评论或其他方式与我交流！ 邮箱: he0xwhale@gmail.com github: https://github.com/he0xwhale"},{"title":"所有分类","date":"2025-06-11T07:15:17.483Z","updated":"2025-06-11T07:15:17.483Z","comments":true,"path":"categories/index.html","permalink":"https://ai.he0xwhale.xyz/categories/index.html","excerpt":"","text":""},{"title":"友链","date":"2025-06-11T07:27:14.706Z","updated":"2025-06-11T07:27:14.706Z","comments":false,"path":"friends/index.html","permalink":"https://ai.he0xwhale.xyz/friends/index.html","excerpt":"","text":"欢迎交换友链，请留言或联系我。 友情链接 Hexo 官方文档 Volantis 主题文档"},{"title":"所有标签","date":"2025-06-11T07:18:27.774Z","updated":"2025-06-11T07:18:27.774Z","comments":true,"path":"tags/index.html","permalink":"https://ai.he0xwhale.xyz/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo 博客中添加字数统计功能出现标题解析异常的排查记录","slug":"2025/06/18/hexo-wordcount-bugfix","date":"2025-06-18T03:10:00.000Z","updated":"2025-06-18T03:18:59.571Z","comments":true,"path":"2025/06/18/2025/06/18/hexo-wordcount-bugfix/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/18/2025/06/18/hexo-wordcount-bugfix/","excerpt":"","text":"在为 Hexo 博客集成字数统计功能时，我遇到一个渲染异常的问题：一段普通的文字和其后的图片被误解析为标题（&lt;h2&gt; 标签），导致显示错乱。这篇文章记录了该问题的排查和解决过程，供遇到类似情况的朋友参考。 一、背景与问题描述我为 Hexo 博客安装了 hexo-wordcount 插件，并使用 Volantis 主题。在配置 top_meta 后，字数统计功能成功显示。但在文章中记录成功效果时，出现如下异常渲染： 1234&lt;h2 id=&quot;最终，在文章标题下方正确显示了字数统计和阅读时长信息。&quot;&gt; ... &lt;img src=&quot;...&quot;&gt;&lt;/h2&gt; 原因是如下 Markdown 被错误渲染为一个标题标签： 12最终，在文章标题下方正确显示了字数统计和阅读时长信息。![wordcount](../../../../images/screenshot/2025-06-13_11-18_wordcount.png) 二、原因分析这一问题的根本原因在于 Markdown 渲染器（如 hexo-renderer-marked 或 markdown-it）在处理文字段落紧跟图片的语法时，某些情况下可能会将其视为同一个段落，并错误地转换为标题。 特别是在前一行末尾为句号或中文符号，下一行又是图片语法（![...](...)），更容易被误判。 三、解决办法✅ 方法一：添加空行最简单直接的方式是在文字和图片之间添加空行： 123最终，在文章标题下方正确显示了字数统计和阅读时长信息。![wordcount](../../../../images/screenshot/2025-06-13_11-18_wordcount.png) 这样就能明确告诉 Markdown 渲染器，两者为独立段落，避免误合并。 ✅ 方法二：使用 HTML 显式结构如果你希望行为更可控，也可以使用 HTML 标签来书写： 12&lt;p&gt;最终，在文章标题下方正确显示了字数统计和阅读时长信息。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/screenshot/2025-06-13_11-18_wordcount.png&quot; alt=&quot;wordcount&quot;&gt;&lt;/p&gt; 适用于结构化或需要稳定渲染效果的写作场景。 四、推荐做法如果你经常写文章涉及图片展示，建议： 保持图片前后有空行，避免粘连； 为每段落标题单独一行，加空行隔开； 避免中文段落结尾紧贴 Markdown 图片语法； 也可视情况用 HTML 标签规避解析器差异。 五、总结Markdown 的“简洁”语法有时也容易出现歧义。在 Hexo + Volantis 环境中，特别是涉及插件渲染和主题模板的场景，更需要小心结构布局。希望本文对你遇到类似问题时有所帮助。 如果你在 Hexo 使用过程中也遇到其他类似问题，欢迎留言交流 🙌。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ai.he0xwhale.xyz/tags/Volantis/"},{"name":"Markdown","slug":"Markdown","permalink":"https://ai.he0xwhale.xyz/tags/Markdown/"},{"name":"Bug排查","slug":"Bug排查","permalink":"https://ai.he0xwhale.xyz/tags/Bug%E6%8E%92%E6%9F%A5/"}]},{"title":"用 Cursor 开发 VSCode 插件时遇到的版本兼容性问题排查实录","slug":"2025/06/17/vscode-cursor-plugin-issue","date":"2025-06-17T06:13:00.000Z","updated":"2025-06-17T06:13:00.000Z","comments":true,"path":"2025/06/17/2025/06/17/vscode-cursor-plugin-issue/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/17/2025/06/17/vscode-cursor-plugin-issue/","excerpt":"","text":"VSCode 插件在 Cursor 不能用？一次环境兼容性大坑的排查与解决最近在开发 VSCode 插件时，遇到了一个非常隐蔽但又很有代表性的大坑：插件在官方 VSCode 客户端中一切正常，但在 Cursor 编辑器中死活激活不了，命令也不显示。 这篇文章记录我的排查过程、最终的解决办法，以及一些经验教训，希望能帮到遇到类似问题的你。 问题描述我写了一个 VSCode 插件，在官方 VSCode 客户端里可以正常激活和使用，命令也能正常显示。但当我切换到 Cursor 编辑器，发现插件根本没有被激活，命令也找不到。 我反复检查代码、配置，依赖也都装了，编译也没报错，就是不行！ 排查过程1. 常规排查 重新安装依赖（pnpm install） 重新编译（pnpm run compile） 检查 package.json 配置 查看输出面板和调试控制台 结果都没有发现明显问题。 2. 环境对比（真实心路）其实在排查过程中，我并没有第一时间注意到 VSCode 和 Cursor 的底层版本差异。一开始只是觉得它们界面很像，理所当然地以为插件兼容性不会有大问题。 直到我在向 ChatGPT 提问、查找资料时，AI 给出的参考链接里，有一位开发者在论坛帖子中提到了 Cursor 的 VSCode 版本和 package.json 里声明的版本不一致，我才恍然大悟！ 3. 灵感来源这个帖子真的救了我一命：How to debug a VS Code extension using CursorAI 他们的解决办法是：把 package.json 里的 vscode 版本降级到 Cursor 支持的版本，比如 ^1.93.0，然后重新装依赖、重新编译，插件就能用了！ 解决办法 修改 package.json： 12345&#123; &quot;engines&quot;: &#123; &quot;vscode&quot;: &quot;^1.93.0&quot; &#125;&#125; 同步修改 @types/vscode 依赖版本为 ^1.93.0 重新安装依赖： 1pnpm install 重新编译： 1pnpm run compile 重启 Cursor，插件终于能正常激活了！ 经验与建议 环境兼容性问题很隐蔽，尤其是 VSCode 插件开发，别只盯着代码，环境和依赖版本也很关键！ 遇到问题多去官方论坛、社区搜一搜，有时候一句话就能救你一天。 提问时尽量描述清楚环境差异和具体表现，这样更容易获得有用的答案。 很多时候，我们并不是靠自己一步步推理出来的，而是通过社区、AI、搜索引擎等外部信息，才发现了问题的本质。 参考链接 How to debug a VS Code extension using CursorAI 如果你也遇到类似问题，欢迎在评论区留言交流！ 希望这篇文章能帮你少走弯路！ 如需进一步交流，欢迎关注我的频道&#x2F;博客，后续会持续分享更多开发实战经验！","categories":[{"name":"开发实战","slug":"开发实战","permalink":"https://ai.he0xwhale.xyz/categories/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"}],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"https://ai.he0xwhale.xyz/tags/VSCode/"},{"name":"Cursor","slug":"Cursor","permalink":"https://ai.he0xwhale.xyz/tags/Cursor/"},{"name":"插件开发","slug":"插件开发","permalink":"https://ai.he0xwhale.xyz/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"踩坑记录","slug":"踩坑记录","permalink":"https://ai.he0xwhale.xyz/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"}]},{"title":"Hexo 博客结构化数据与 SEO 配置实践全记录","slug":"2025/06/17/hexo_seo_debug_guide","date":"2025-06-17T02:43:01.000Z","updated":"2025-06-17T07:11:24.562Z","comments":true,"path":"2025/06/17/2025/06/17/hexo_seo_debug_guide/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/17/2025/06/17/hexo_seo_debug_guide/","excerpt":"","text":"最近对 Hexo 博客进行了结构化数据（Structured Data）与 SEO 配置优化，过程中踩了不少坑，以下是完整的记录与总结，希望对同样使用 Hexo 的朋友有所帮助。 一、起因：Search Console 无法检测结构化数据起初在 Google 的 Rich Results 测试工具和 Search Console 中发现博客页面无法识别任何结构化数据，怀疑是结构化数据输出有误。 二、排查过程与问题定位1. 替换 schema.org.cn 为 schema.org在检查页面源代码后发现结构化数据的 @context 字段中使用了 https://schema.org.cn，而 Google 仅识别 https://schema.org，于是批量替换： 1find . -type f -exec sed -i &#x27;s/schema\\.org\\.cn/schema.org/g&#x27; &#123;&#125; + 修改后重新部署，Rich Results 测试开始可以正常识别结构化数据。但具体是因为该原因还是只是延迟导致的，还没有完全确定。 2. Search Console 仍无索引虽然 Rich Results 工具成功检测，但 Search Console 中依然没有任何结构化数据结果。考虑可能是 Google 尚未重新抓取，决定暂时不再深究。 三、SEO 配置优化建议（基础 + Open Graph + Structured Data）（1）基础 SEO 设置keywords 配置1use_tags_as_keywords: true 建议在首页或重要页面额外加上 front-matter 中的 keywords 字段，并限制关键词数量（推荐 5–10 个）以避免关键词堆砌。 description 描述1use_excerpt_as_description: true 摘要需控制在 150–160 字，建议重要页面手动设置 description，可加入品牌词、核心亮点。 robots 设置12345home_first_page: index,followhome_other_pages: noindex,followarchive: noindex,followcategory: noindex,followtag: noindex,follow 若分页&#x2F;分类&#x2F;标签页确实有价值内容，可将其调整为 index,follow。 sitemap.xml 配置确保安装并正确配置： 1npm install hexo-generator-sitemap --save 并在 robots.txt 中声明： 1Sitemap: https://your-domain.com/sitemap.xml canonical 链接建议启用，避免重复页面影响权重。 （2）Open Graph 社交分享默认图片open_graph.image 建议使用完整 URL，例如： 12open_graph: image: https://cdn.jsdelivr.net/gh/your-repo/img/android-chrome-192x192.png Twitter 类型如果文章有大封面图，建议使用： 1twitter_card_type: summary_large_image Twitter ID12twitter_id: &quot;@your_id&quot;twitter_site: &quot;@your_site&quot; （3）Structured Data 结构化数据已启用类型：BlogPosting、BreadcrumbList、Organization、Person、Website。 建议确认以下字段输出完整： headline datePublished dateModified mainEntityOfPage author.name publisher.logo 组织信息 Organization12345678structured_data: data: organization: name: &quot;Your Brand&quot; url: &quot;https://your-domain.com&quot; sameAs: - &quot;https://twitter.com/your_brand&quot; - &quot;https://github.com/your_brand&quot; 作者信息 Person1234person: name: &quot;Your Name&quot; url: &quot;https://your-domain.com/about&quot; image: &quot;https://your-domain.com/img/avatar.png&quot; 四、Search Console 报错 sitemap.xml “Couldn’t fetch” 的解决在 Search Console 添加 sitemap.xml 时出现 “Couldn’t fetch” 报错，但直接访问如 https://ai.example.xyz/sitemap.xml 却正常。 排查后确认是插件未安装导致未生成 sitemap 文件。解决方法： 1npm install hexo-generator-sitemap --save 然后重新部署： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 再次提交 sitemap 即可正常解析。 五、总结通过上述一系列配置与排查，博客的结构化数据已能被 Google 正确识别，同时也梳理了 SEO 的相关策略，包括关键词、摘要、社交分享优化等。 建议所有 Hexo 用户结合自己内容情况进行适度调整，重点关注 sitemap 输出、结构化数据 schema 正确性、以及 Meta 标签内容丰富性。 祝各位博客 SEO 提升顺利！","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"SEO","slug":"博客搭建/SEO","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/SEO/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"SEO","slug":"SEO","permalink":"https://ai.he0xwhale.xyz/tags/SEO/"},{"name":"OpenGraph","slug":"OpenGraph","permalink":"https://ai.he0xwhale.xyz/tags/OpenGraph/"},{"name":"结构化数据","slug":"结构化数据","permalink":"https://ai.he0xwhale.xyz/tags/%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/"},{"name":"搜索引擎优化","slug":"搜索引擎优化","permalink":"https://ai.he0xwhale.xyz/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/"}]},{"title":"Hexo 博客中添加字数统计功能的实践记录","slug":"2025/06/13/hexo-wordcount-practice","date":"2025-06-13T02:49:18.000Z","updated":"2025-06-17T08:51:50.177Z","comments":true,"path":"2025/06/13/2025/06/13/hexo-wordcount-practice/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/13/2025/06/13/hexo-wordcount-practice/","excerpt":"","text":"在搭建 Hexo 博客并使用 Volantis 主题时，我尝试为文章添加字数统计功能。以下是我在此过程中遇到的问题和最终解决方案的完整记录。 一、安装插件与初始配置我按照_config.yml中说明的，安装了 hexo-wordcount 插件： 1npm i hexo-wordcount 并在博客volantis主题目录下的 _config.yml 文件中进行了如下配置： 1234plugin: # ...(省略) wordcount: enable: true 并运行以下命令以重建博客： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 二、发现没有生效尽管配置无误，且 hexo-wordcount 插件安装成功，但在本地启动博客预览时，文章标题下方并未显示任何字数统计信息。 三、逐步排查1. 检查 article.ejs首先我查看了主题路径下的 themes/volantis/layout/_partial/article.ejs，发现其通过 &lt;%- partial(&#39;meta&#39;, &#123;post: post, position: &#39;top&#39;&#125;) %&gt; 引用了 meta.ejs 文件，即所有顶栏信息都来源于该处。 2. 查看 meta.ejs继续跟踪到 themes/volantis/layout/_partial/meta.ejs，该文件通过如下逻辑决定顶部信息的内容： 12345&lt;% getList(topMetas).forEach(function(meta) &#123; %&gt; &lt;% if (meta in theme.article.body.meta_library)&#123; %&gt; &lt;%- partial(&#x27;../_meta/&#x27; + meta, &#123;post: post&#125;) %&gt; &lt;% &#125; %&gt;&lt;% &#125;) %&gt; 说明真正负责渲染字数统计的代码位于 themes/volantis/layout/_meta/wordcount.ejs 文件。 3. 找到字数统计渲染模板我找到了该文件，其内容如下： 1234567891011121314&lt;% if (theme.plugins.wordcount.enable) &#123; %&gt; &lt;div class=&quot;new-meta-item wordcount&quot;&gt; &lt;a class=&#x27;notlink&#x27;&gt; &lt;i class=&quot;&lt;%- theme.article.body.meta_library.wordcount.icon_wordcount %&gt; fa-fw&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;p&gt;&lt;%- __(&#x27;post.wordcount&#x27;, wordcount(post.content))%&gt;&lt;/p&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=&quot;new-meta-item readtime&quot;&gt; &lt;a class=&#x27;notlink&#x27;&gt; &lt;i class=&quot;&lt;%- theme.article.body.meta_library.wordcount.icon_duration %&gt; fa-fw&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &lt;p&gt;&lt;%- __(&#x27;post.duration&#x27;, min2read(post.content))%&gt;&lt;/p&gt; &lt;/a&gt; &lt;/div&gt;&lt;% &#125; %&gt; 模板存在，配置也没报错，为什么就是不显示呢？ 四、真正的原因查看和AI的对话，我注意到了top_meta这个配置项，最终我意识到问题出在一个不起眼的配置项： 1234theme: article: body: top_meta: [author, category, date, wordcount, counter] 在我的原始配置中，并未在 top_meta 中包含 wordcount，所以尽管一切准备就绪，模板中没有调用它，自然就不会渲染出来。 五、成功显示添加了 wordcount 到 top_meta 列表后，再次运行： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 最终，在文章标题下方正确显示了字数统计和阅读时长信息： 至此，字数统计功能成功集成。如果你也遇到类似问题，可以从以下几点排查： 插件是否正确安装 _config.yml 中是否启用了 wordcount top_meta 中是否包含 wordcount 模板文件是否存在 wordcount.ejs 希望这篇文章能帮到你。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ai.he0xwhale.xyz/tags/Volantis/"},{"name":"字数统计","slug":"字数统计","permalink":"https://ai.he0xwhale.xyz/tags/%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/"}]},{"title":"Hexo 博客中为文章添加封面图的实践记录","slug":"2025/06/12/hexo-cover-image-practice","date":"2025-06-12T07:00:00.000Z","updated":"2025-06-13T02:26:51.018Z","comments":true,"path":"2025/06/12/2025/06/12/hexo-cover-image-practice/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/12/2025/06/12/hexo-cover-image-practice/","excerpt":"","text":"1. 写在前面在搭建 Hexo 博客的过程中，我一直希望文章列表能更美观一些。特别是首页的文章卡片，如果能加上一张封面图，整体效果会更加吸引人。于是我着手尝试为文章添加封面图，并记录下这个过程，希望对同样使用 Volantis 主题的朋友有所帮助。 2. 封面图功能的支持背景我使用的是 Hexo + Volantis 主题，发现主题的文章预览卡片中，实际上是支持封面图显示的。只是这一功能并不默认开启，也没有在文档中有明显说明，需要我们自己手动配置。 在文章的 front-matter 中加入headimg字段，就可以控制每篇文章的封面图显示。 3. 添加封面图的方法在每篇 Markdown 文章的开头（也就是 front-matter 区域），添加 headimg 字段即可。 比如： 1234567---title: Hexo 博客封面图测试date: 2025-06-10 16:20:00tags: - 博客测试headimg: /images/test-cover.jpg--- 💡 图片路径推荐放在 source/images/ 目录中，发布后可通过 /images/xxx.jpg 的形式引用。 4. 封面图排查与验证过程一开始，我在文章中添加了 cover 字段，却没有显示封面图。于是我开始了排查过程： 4.1 从 layout 开始追查我打开了主题中的 layout/index.ejs 文件，发现它引用了 _partial/archive 模板： 1&lt;%- partial(&#x27;_partial/archive&#x27;) %&gt; 4.2 查看 _partial&#x2F;archive.ejs在 archive.ejs 中，每一篇文章都通过如下方式渲染： 1&lt;%- partial(&#x27;post&#x27;, &#123;post: post&#125;) %&gt; 4.3 最终定位到 post.ejs在 post.ejs 中，我看到了如下片段： 123&lt;% if (post.headimg) &#123; %&gt; &lt;img src=&quot;&lt;%- post.headimg %&gt;&quot; ... /&gt;&lt;% &#125; %&gt; 这时候我才意识到，原来 Volantis 主题是通过 headimg 字段来识别封面图的。 于是我把 front-matter 中的 cover 改成了 headimg，问题就解决了！ 5. 最终效果与小结现在，我的博客首页已经成功地为每篇文章展示封面图了。效果如下： 图片大小自动适配卡片宽度 支持本地图片引用（推荐放到 source/images/ 目录） 不需要修改任何模板，只需配置 headimg 字段即可 5.1 使用建议 每篇文章的封面图尽量统一尺寸，保持视觉一致性 可以使用 Gork、Canva 等工具快速生成封面图 如果有自动化需求，也可以结合脚本为旧文章批量添加封面字段 希望这篇记录对你有所帮助！","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ai.he0xwhale.xyz/tags/Volantis/"},{"name":"博客封面图","slug":"博客封面图","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2%E5%9B%BE/"},{"name":"实践记录","slug":"实践记录","permalink":"https://ai.he0xwhale.xyz/tags/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"}]},{"title":"Hexo 博客中插入本地图片的实践记录","slug":"2025/06/11/markdown_add_image","date":"2025-06-11T09:00:00.000Z","updated":"2025-06-12T07:21:00.356Z","comments":true,"path":"2025/06/11/2025/06/11/markdown_add_image/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/11/2025/06/11/markdown_add_image/","excerpt":"","text":"🗃️ 图片存放位置的选择我将图片统一放在了博客项目的 source/images/ 目录下，这样在 Hexo 构建时会自动复制到 public/images/ 中，路径清晰、引用方便。 ✏️ Markdown 插图语法示例在 Markdown 中插入图片，我采用的是标准语法： 1![评论区截图](/images/comment-preview.png) 图片路径是以 /images/ 开头的绝对路径，对应的是构建后 public/images/ 中的资源。 🔍 本地预览验证方法执行以下命令后，可以本地预览： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 浏览器打开 http://localhost:4000/ 后，文章内图片能正常显示。也可以直接访问图片链接： 1http://localhost:4000/images/comment-preview.png 如果图片能单独访问，但在文章里不显示，那就要检查是否用了相对路径、或者图片链接是否打错。 ✅ 总结Hexo 插图其实不复杂，只要把图片放在 source/ 下，并使用正确路径，就可以稳定地显示。以后写文时，我都会统一放在 source/images/，省心不少。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"https://ai.he0xwhale.xyz/tags/Markdown/"},{"name":"插图","slug":"插图","permalink":"https://ai.he0xwhale.xyz/tags/%E6%8F%92%E5%9B%BE/"},{"name":"博客技巧","slug":"博客技巧","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%8A%80%E5%B7%A7/"}]},{"title":"Hexo 博客中添加分类、标签、关于、友链页面的完整教程（Volantis 主题）","slug":"2025/06/11/hexo-volantis-add-pages-guide","date":"2025-06-11T04:00:00.000Z","updated":"2025-06-12T09:07:09.606Z","comments":true,"path":"2025/06/11/2025/06/11/hexo-volantis-add-pages-guide/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/11/2025/06/11/hexo-volantis-add-pages-guide/","excerpt":"","text":"Hexo Volantis 添加常用页面指南前言在搭建 Hexo 博客并使用 Volantis 主题时，很多人会遇到访问 /categories/、/tags/、/about/ 或 /friends/ 页面时提示 Cannot GET 的问题。本文将手把手教你如何手动添加这些页面并正确配置它们的 front-matter，从而让博客结构更完整，功能更齐全。 一、添加分类页面（&#x2F;categories&#x2F;）1. 安装插件（如未安装）1npm install hexo-generator-category --save 2. 创建页面1hexo new page categories 3. 修改 front-matter编辑 source/categories/index.md 内容如下： 12345---layout: categoryindex: truetitle: 分类--- 4. 重建博客1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 5. 访问验证浏览器访问：http://localhost:4000/categories/ 二、添加标签页面（&#x2F;tags&#x2F;）1. 创建页面1hexo new page tags 2. 修改 front-matter编辑 source/tags/index.md 内容如下： 12345---layout: tagindex: truetitle: 标签--- 3. 重新生成并访问1hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 访问：http://localhost:4000/tags/ 三、添加关于页面（&#x2F;about&#x2F;）1. 创建页面1hexo new page about 2. 编辑 front-matter 和正文123456---title: 关于我layout: page---你好，我是 XXX。欢迎来到我的博客。 3. 访问验证浏览器访问：http://localhost:4000/about/ 四、添加友链页面（&#x2F;friends&#x2F;）1. 创建页面1hexo new page friends 2. 编辑 front-matter 和内容123456789101112---title: 友链layout: pagecomments: false---欢迎交换友链，请留言或联系我。## 友情链接- [Hexo 官方文档](https://hexo.io/)- [Volantis 主题文档](https://volantis.js.org/) 3. 可选：使用卡片式展示Volantis 支持自定义 friends.yml 数据文件，可配合自定义模板实现卡片式展示。 五、常见问题与总结页面生成了但访问仍然报错？请检查： source/xxx/index.md 文件是否存在 front-matter 是否写错字段（必须包含 layout: xxx 和 index: true） 是否执行了 hexo clean &amp;&amp; hexo g Volantis 支持的 layout 对照表： 页面类型 layout 值 分类页 category 标签页 tag 关于页 page 友链页 page 附录：页面文件结构参考123456789source/├── about/│ └── index.md├── categories/│ └── index.md├── tags/│ └── index.md├── friends/│ └── index.md 生成后的页面会在 public/ 目录中对应生成。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ai.he0xwhale.xyz/tags/Volantis/"},{"name":"博客页面","slug":"博客页面","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/"},{"name":"分类标签","slug":"分类标签","permalink":"https://ai.he0xwhale.xyz/tags/%E5%88%86%E7%B1%BB%E6%A0%87%E7%AD%BE/"},{"name":"友链页面","slug":"友链页面","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2/"}]},{"title":"Hexo 博客中集成 Giscus 评论系统的实践记录","slug":"2025/06/10/hexo_giscus_setup","date":"2025-06-10T10:00:00.000Z","updated":"2025-06-17T01:53:30.107Z","comments":true,"path":"2025/06/10/2025/06/10/hexo_giscus_setup/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/10/2025/06/10/hexo_giscus_setup/","excerpt":"","text":"Hexo 集成 Giscus 评论系统完整指南📘 一、Giscus 简介Giscus 是一个基于 GitHub Discussions 的现代评论系统，支持 Markdown、暗黑模式、Reactions，并通过 GitHub OAuth 实现身份识别。它不需要额外数据库，适用于技术博客、文档站点等。 volantis默认支持 Giscus，所以选择了这个插件系统。 🚀 二、准备工作2.1 拥有一个公开 GitHub 仓库确保你的博客源代码所在的仓库是公开的。 2.2 Hexo 安装与主题准备本文以 Volantis 主题为例，你应已完成以下操作： 安装 Hexo 配置并使用 Volantis 主题 启用 Hexo 的 deploy 功能（如 hexo-deployer-git） 🔧 三、GitHub 端配置3.1 启用 Discussions 功能 进入你的 GitHub 仓库主页 点击菜单栏的【Settings】→ 左侧【Features】 → 勾选 Discussions 3.2 创建 Discussion 分类 打开仓库的 Discussions 页面 点击右上角 ⚙️ Settings 创建一个新分类，建议类型为 Announcements 复制该分类的名称（如 General）和 ID（通过 giscus.app 获取） 3.3 安装 Giscus GitHub App 打开 https://github.com/apps/giscus 点击【Install】 选择你博客所用的仓库进行授权 ⚙️ 四、使用 Giscus 配置生成器访问 https://giscus.app 进行配置： Repository：填写 yourname/yourrepo Category：选择刚才创建的分类 Mapping：选择 pathname（推荐） Input position：选择 Top Theme：light 或 preferred_color_scheme Language：选择 zh-CN 建议启用的特性 ✅ Enable reactions for the main post ✅ Load the comments lazily ❌ Emit discussion metadata（一般不必） ✅ Place the comment box above the comments 点击底部【Copy code】，复制生成的配置 JSON 内容。 🛠️ 五、Hexo 中集成 Giscus（Volantis 主题）5.1 配置主题文件编辑文件： 1themes/volantis/layout/_plugins/comments/giscus/script.ejs 确认已有以下内容： 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;script&gt; volantis.layoutHelper(&quot;comments&quot;,`&lt;div id=&quot;giscus_container&quot;&gt;&lt;/div&gt;`) volantis.giscus = &#123;&#125;; function check_giscus() &#123; if (volantis.dark.mode === &quot;dark&quot;) &#123; volantis.giscus.Theme = &#x27;&lt;%- theme.comments.giscus.theme.dark %&gt;&#x27;; &#125; else &#123; volantis.giscus.Theme = &#x27;&lt;%- theme.comments.giscus.theme.light %&gt;&#x27;; &#125; return document.getElementById(&quot;giscus_container&quot;); &#125; function p_giscus() &#123; const HEAD = check_giscus(); if (!HEAD) return; let cfg = Object.assign(&lt;%- JSON.stringify(theme.comments.giscus) %&gt;,pdata.commentConfig) const script = document.createElement(&#x27;script&#x27;); script.setAttribute(&#x27;src&#x27;, &#x27;https://giscus.app/client.js&#x27;); Object.keys(cfg).forEach(k=&gt;&#123; if (k != &quot;theme&quot;) &#123; script.setAttribute(&#x27;data-&#x27;+k, cfg[k]); &#125; &#125;) script.setAttribute(&#x27;data-theme&#x27;, volantis.giscus.Theme); script.setAttribute(&#x27;crossorigin&#x27;, &quot;anonymous&quot;); HEAD.appendChild(script); &#125; function dark_giscus() &#123; const HEAD = check_giscus(); if (!HEAD) return; const message = &#123; setConfig: &#123; theme: volantis.giscus.Theme &#125; &#125;; const giscusIframe = document.querySelector(&#x27;iframe.giscus-frame&#x27;); giscusIframe.contentWindow.postMessage(&#123; giscus: message &#125;, &#x27;https://giscus.app&#x27;); &#125; p_giscus(); volantis.dark.push(dark_giscus);&lt;/script&gt; 5.2 主题配置文件 _config.yml (theme目录下的)12345678910111213141516comments: giscus: repo: yourname/yourrepo repo-id: YOUR_REPO_ID category: General category-id: YOUR_CATEGORY_ID mapping: pathname strict: 0 reactions-enabled: 1 emit-metadata: 0 input-position: top theme: light: light dark: dark_dimmed lang: zh-CN loading: lazy 🧪 六、本地调试与错误排查在调试过程中，我遇到了一些比较典型的问题，这里记录下来以供参考。 6.1 常见问题 An error occurred: giscus is not installed on this repository 一开始我没注意到要安装 Giscus 的 GitHub App，导致一直报这个错。后来在 https://github.com/apps/giscus 页面安装之后问题解决了。 403 Forbidden: repo&#x3D;undefined 这个问题出现在我忘记正确填写主题配置文件中的 repo 和 repo-id。另外要注意，相关配置必须写在 themes/volantis/_config.yml 中，而不是_config.volantis.yml文件。 📤 七、部署与 Git 提交使用以下 deploy.sh 自动部署脚本： 1234567891011121314151617181920212223#!/bin/bashset -eecho &quot;🧹 Cleaning cache and public folder...&quot;hexo cleanecho &quot;📦 Generating static files...&quot;hexo generateecho &quot;🚀 Deploying to GitHub Pages...&quot;hexo deployecho &quot;✅ Hexo deploy finished.&quot;# 提交 source 源码（包含主题子模块）echo &quot;📁 Committing source code...&quot;git submodule foreach &#x27;git add . &amp;&amp; git commit -m &quot;update submodule&quot; || echo &quot;No changes in submodule&quot;&#x27;git add .read -p &quot;📝 Enter commit message: &quot; msggit commit -m &quot;$msg&quot;git push origin mainecho &quot;🎉 All done!&quot; ✅ 八、效果预览与总结在部署完成后，我访问了博客页面，Giscus 评论区成功加载。它的加载速度很快，界面简洁，支持登录用户互动，还能显示 emoji reactions。 这次集成体验整体比较顺利，唯一花时间的是理清配置的几个关键点。整体来看，Giscus 的无后端、无广告、与 GitHub 无缝集成等特点，非常契合我的博客需求。如果你也在使用 Hexo 搭建博客，不妨也试试 Giscus —— 搭起来其实没那么难。","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"评论系统","slug":"评论系统","permalink":"https://ai.he0xwhale.xyz/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"name":"Giscus","slug":"Giscus","permalink":"https://ai.he0xwhale.xyz/tags/Giscus/"},{"name":"GitHub Discussions","slug":"GitHub-Discussions","permalink":"https://ai.he0xwhale.xyz/tags/GitHub-Discussions/"}],"author":"he0xwhale"},{"title":"Hexo 博客中 Markdown 标题序号的添加与规范实践","slug":"2025/06/10/hexo_markdown_title_numbering","date":"2025-06-10T09:00:00.000Z","updated":"2025-06-12T08:56:02.625Z","comments":true,"path":"2025/06/10/2025/06/10/hexo_markdown_title_numbering/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/10/2025/06/10/hexo_markdown_title_numbering/","excerpt":"","text":"引言在写博客时，Markdown 标题序号经常会出现缺失或混乱的问题，尤其是在多人编辑或长期维护的博客项目中。标题结构跳级也常导致 Hexo 渲染页面时出现错乱，比如标题被误识为列表，页面结构紊乱。 本文聚焦两个核心问题： 如何统一给 Markdown 标题添加序号，以及如何清理已有的错误序号； 如何检测并规范标题等级跳级，避免 Hexo 渲染异常。 Part 1：统一添加 &#x2F; 删除标题序号1.1 使用 VS Code 插件自动添加序号推荐使用 VS Code 插件 Markdown All in One 来自动给 Markdown 标题添加序号。 安装插件后，使用命令面板（Ctrl+Shift+P）执行：Add/Update Section Numbers 该命令会遍历文档所有标题，自动添加类似如下的编号： 12## 1. 项目初始化### 1.1 安装依赖 注意： 目前该插件只能生成阿拉伯数字格式的序号； 它不会自动检测并删除已有的编号，重复执行可能导致序号重复。 1.2 删除已有标题序号（使用 Replace Rules）为了避免编号重复，建议先清理已有的编号。 使用 VS Code 插件 Replace Rules 可以批量替换文本，自动清理标题中的旧编号。 在工作区根目录下创建 .vscode/replace-rules.json 文件，写入如下规则： 1234567[ &#123; &quot;find&quot;: &quot;^(#&#123;2,6&#125;)\\s+(\\d+(\\.\\d+)*\\s+)(.*)&quot;, &quot;replace&quot;: &quot;$1 $4&quot;, &quot;flags&quot;: &quot;gm&quot; &#125;] 使用命令面板执行 Replace Rules: Run Rule，即可一键删除二级到六级标题中多余的数字编号。 Part 2：检测并规范标题跳级结构2.1 标题跳级问题简介Markdown 标题跳级指的是标题等级没有按顺序递增，常见示例： 123## 项目初始化#### 安装依赖## 功能介绍 这里，二级标题下直接出现了四级标题，导致 Hexo 渲染时后续的二级标题 功能介绍 被误认为是有序列表，造成排版和目录显示混乱。 2.2 使用 Markdownlint 检查标题结构通过 VS Code 插件 markdownlint 可以实时检测标题跳级问题。 安装插件后，在项目根目录创建 .markdownlint.json，启用标题层级规则： 1234&#123; &quot;default&quot;: false, &quot;MD001&quot;: true&#125; 规则说明： MD001 要求标题级别必须顺序递增，不允许跳级； 这样可以帮助你及时发现跳级错误，保证 Markdown 结构规范，避免 Hexo 渲染异常。 总结与推荐工作流推荐工作流程 检测标题跳级：使用 markdownlint 规范标题等级顺序，保证结构正确； 清理旧序号：用 Replace Rules 批量删除已有数字编号，避免重复； 添加新序号：用 Markdown All in One 插件统一生成阿拉伯数字格式序号； 最终校验并发布。 关键工具清单 Markdown All in One：自动添加标题序号 Replace Rules：清理旧的标题编号 markdownlint：检测标题跳级和其他规范问题 附录.markdownlint.json 示例配置1234&#123; &quot;default&quot;: false, &quot;MD001&quot;: true&#125; replace-rules.json 示例1234567[ &#123; &quot;find&quot;: &quot;^(#&#123;2,6&#125;)\\s+(\\d+(\\.\\d+)*\\s+)(.*)&quot;, &quot;replace&quot;: &quot;$1 $4&quot;, &quot;flags&quot;: &quot;gm&quot; &#125;]","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"Markdown","slug":"Markdown","permalink":"https://ai.he0xwhale.xyz/tags/Markdown/"},{"name":"标题序号","slug":"标题序号","permalink":"https://ai.he0xwhale.xyz/tags/%E6%A0%87%E9%A2%98%E5%BA%8F%E5%8F%B7/"},{"name":"博客规范","slug":"博客规范","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E8%A7%84%E8%8C%83/"}]},{"title":"使用 Hexo 搭建 AI 编程风格的吉卜力风博客","slug":"2025/06/09/ai-ghibli-hexo-blog","date":"2025-06-08T21:57:04.000Z","updated":"2025-06-12T08:55:36.221Z","comments":true,"path":"2025/06/09/2025/06/09/ai-ghibli-hexo-blog/","link":"","permalink":"https://ai.he0xwhale.xyz/2025/06/09/2025/06/09/ai-ghibli-hexo-blog/","excerpt":"","text":"本文整合了我在搭建博客过程中的对话内容，系统地记录了使用 Hexo + Volantis 搭建一个 AI 编程主题的吉卜力风格博客的过程，包括部署、主题安装、美化、图标替换、壁纸设置与自动刷新等内容。 1. 项目初始化与环境准备1234npm install -g hexohexo init ai_blogcd ai_blognpm install 确认版本： 1hexo -v ✅ 为什么要确认版本？ Volantis 主题对 Hexo 有最低版本要求。根据 Volantis 官方文档，推荐使用 Hexo 6.3.0 或更高版本，以获得最佳兼容性和功能支持。 使用以上命令检查当前版本是否符合要求。如果你的 Hexo 版本低于要求，可以通过以下方式升级： 1npm install -g hexo@latest 2. 主题安装与配置 Volantis ✅ 推荐使用 Git 子模块的方式安装主题，以便未来方便升级、避免嵌套仓库冲突。 2.1. 安装 Volantis 主题（推荐方式 ✅） Fork Volantis 仓库到你自己的 GitHub 账户前往官方仓库：👉 https://github.com/volantis-x/hexo-theme-volantis点击右上角的 Fork，创建你自己的 Volantis 仓库，例如： 12https://github.com/your-username/hexo-theme-volantis 之所以这样做，是因为后面会对 volantis 的源码进行一些修改，通过_config.yml 的修改不起作用 将当前 themes&#x2F;volantis 绑定为你自己的 fork 1234567cd themes/volantis## 把当前 remote 改为你的 forkgit remote set-url origin https://github.com/your-username/hexo-theme-volantis## 检查 remote 是否设置正确git remote -v 你应该看到： 12origin https://github.com/your-username/hexo-theme-volantis (fetch)origin https://github.com/your-username/hexo-theme-volantis (push) 推送你当前本地修改到你自己的 fork（而不是官方） 添加官方仓库为 upstream 远程，方便后续同步更新 12git remote add upstream https://github.com/volantis-x/hexo-theme-volantis 将来如果官方有更新： 1234567## 拉取官方更新git fetch upstream## 合并你想要的分支，例如官方的 6.0git checkout custom-fontawesomegit merge upstream/6.0## 手动解决冲突并 commit 用 Git 子模块正式管理主题，使得整个流程更加清晰 1234## 在主 Hexo 项目根目录下执行git submodule add https://github.com/your-username/hexo-theme-volantis themes/volantisgit submodule initgit submodule update 这会将 volantis 主题作为一个 Git 子模块管理，优势如下： 便于更新：只需进入子模块目录 themes/volantis，运行 git pull 即可同步官方主题更新； 干净的仓库结构：不会将主题代码混入你的主仓库提交中； 避免冲突：防止主题目录被错误识别为嵌套 Git 仓库，减少 Git 管理异常。 2.2. ❌ 不推荐的方式（容易踩坑）1git clone https://github.com/volantis-x/hexo-theme-volantis.git themes/volantis 具体的原因可以参考第四部分内容：Volantis 子模块管理：踩坑与修复实录 2.3. 配置主题确认主题安装后，在 Hexo 根目录的 _config.yml 中添加： 1theme: volantis 3. 推送到 GitHub Pages3.1. 添加远程仓库12git initgit remote add origin https://github.com/yourname/ai_blog.git 3.2. 添加 .gitignore，忽略 public&#x2F; 与 node_modules&#x2F;.gitignore 文件正常应该已经包含了 public 和 node_modules，如果已经包含，请忽略这一步 12345echo &quot;public/&quot; &gt;&gt; .gitignoreecho &quot;node_modules/&quot; &gt;&gt; .gitignoregit add .git commit -m &quot;chore: initial commit&quot;git push -u origin main 3.3. 配置 Hexo 部署到 gh-pages1npm install hexo-deployer-git --save 12345## _config.ymldeploy: type: git repo: https://github.com/yourname/ai_blog.git branch: gh-pages 3.4. 发布博客1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 4. Volantis 子模块管理：踩坑与修复实录在最开始安装 Volantis 主题时，我直接执行了如下命令： 1git clone https://github.com/volantis-x/hexo-theme-volantis.git themes/volantis 看起来一切都很顺利，但当我尝试 git add . 时，Git 却抛出了一个警告： 1warning: 正在添加嵌入式 git 仓库：themes/volantis 这说明 themes/volantis 目录本身是一个 Git 仓库，等于你把一个完整的仓库嵌套到了你的博客仓库中。Git 不推荐这样做，除非使用子模块机制。否则未来推送或克隆项目时会遇到一堆问题，比如主题目录丢失、部署失败等。 4.1. ✅ 正确的解决方案 移除嵌套的 Git 仓库： 12git rm --cached -r themes/volantis -frm -rf themes/volantis 以子模块方式重新添加： 12git submodule add https://github.com/volantis-x/hexo-theme-volantis.git themes/volantisgit commit -m &quot;chore: convert volantis to git submodule&quot; 初始化并同步子模块： 12git submodule initgit submodule update 4.2. 🤔 如何一开始就避免这个坑？记住：安装 Hexo 主题时，推荐使用 git submodule add，而不是 git clone。 正确方式如下： 1git submodule add https://github.com/volantis-x/hexo-theme-volantis.git themes/volantis （如果需要修改 volantis 的源码，则另外需要 fork 一份，按照上面第二步的操作进行）这样做的好处是结构清晰、维护方便，更新主题也简单，只需进入子模块目录执行： 12cd themes/volantisgit pull origin master 4.3. 🔄 后续管理提醒若以后在新机器上克隆项目，需加上 --recursive 选项： 1git clone --recursive https://github.com/yourname/ai_blog.git 或补执行以下命令： 12git submodule initgit submodule update 5. 字体与图标美化5.1. 替换网站 favicon 图标12## _config.ymlfavicon: /favicon.ico 上传你自己的图标至 source/ 目录。 5.2. 替换 Logo 与博主头像12345678## _config.volantis.ymlnavbar: logo: img: /images/logo-ghibli-ai.pngsidebar: blogger: avatar: /images/logo-ghibli-ai.png 5.3. 首页封面布局简化改用简洁风格 12cover: layout_scheme: simple 5.4. 更换博客背景图为 AI 吉卜力风12cover: background: /images/bg-ai-ghibli.jpg 6. Font Awesome 字体本地化6.1. 目标避免 CDN 依赖，提升加载速度与离线浏览体验。 6.2. 修改步骤步骤： 1.下载这两个字体文件在你的项目中（建议放到 themes&#x2F;volantis&#x2F;source&#x2F;media&#x2F;fonts 目录）： 123456mkdir -p themes/volantis/source/media/fonts/VarelaRoundmkdir -p themes/volantis/source/media/fonts/UbuntuMono## 下载字体wget https://unpkg.com/volantis-static/media/fonts/VarelaRound/VarelaRound-Regular.ttf -O themes/volantis/source/media/fonts/VarelaRound/VarelaRound-Regular.ttfwget https://unpkg.com/volantis-static/media/fonts/UbuntuMono/UbuntuMono-Regular.ttf -O themes/volantis/source/media/fonts/UbuntuMono/UbuntuMono-Regular.ttf 打开 &#x2F;css&#x2F;all.min.css，搜索类似： 1src: url(&quot;../webfonts/fa-solid-900.woff2&quot;) format(&quot;woff2&quot;); 这个路径表示的是从 HTML 中 &#x2F;css&#x2F;all.min.css 出发，回退到根目录后访问 &#x2F;webfonts&#x2F;，这在你的部署目录下应当是： 12public/css/all.min.csspublic/webfonts/*.woff2 将 CSS 中路径手动替换为绝对路径： 12src: url(&quot;/webfonts/fa-solid-900.woff2&quot;) format(&quot;woff2&quot;); 修改 theme&#x2F;_config.yml： 12plugins: fontawesome: false | 意思是：不要让 Volantis 插件插入 Font Awesome 的 CSS，我们手动插入 在 themes&#x2F;volantis&#x2F;layout&#x2F;_partials&#x2F;head&#x2F;head.ejs 中，手动添加这段（确保放在合适位置，比如 末尾）： 1&lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;%= url_for(&#x27;/css/all.min.css&#x27;) %&gt;&quot;&gt; 确保你本地的 themes&#x2F;volantis&#x2F;source&#x2F;css&#x2F;all.min.css 和 webfonts 文件夹都已就位 6.3. Git 提交1234cd themes/volantisgit add source/webfonts/*.woff2git add source/css/all.min.cssgit commit -m &quot;feat: 使用本地 Font Awesome 字体，替换 CDN&quot; 注意：这只影响子模块内，避免影响官方仓库建议在 GitHub 上 fork Volantis 仓库再作为子模块使用。 7. Hexo 开发效率优化与自动刷新7.1. 安装 browser-sync 插件1npm install browser-sync --save-dev 7.2. 自动生效体验在使用 hexo s --draft --open 时 Hexo 会自动集成 browser-sync，页面保存后自动热更新生效。 7.3. 清理遗留 public 文件切换到 gh-pages 分支部署后，main 分支不再需要保留 public/ 内容： 1git rm -r --cached public/ 确认 .gitignore 中已添加 public/ 条目。 8. 自动化部署脚本deploy.sh 12345678910111213141516171819202122232425#!/bin/bashset -e # 出错即停echo &quot;🧹 Cleaning cache and public folder...&quot;hexo cleanecho &quot;📦 Generating static files...&quot;hexo generateecho &quot;🚀 Deploying to GitHub Pages...&quot;hexo deployecho &quot;✅ Hexo deploy finished.&quot;## 交互式输入 commit messageread -p &quot;📝 Enter commit message for source code: &quot; commit_msgecho &quot;📁 Committing source code to Git repository...&quot;git add .git commit -m &quot;$commit_msg&quot;git push origin mainecho &quot;🎉 All done!&quot; 使用方法： 保存脚本为 deploy.sh 赋予执行权限（仅第一次）： 1chmod +x deploy.sh 每次发布时执行： 1./deploy.sh 9. 总结本次博客搭建过程较为完整，期间踩坑不少，如 Git 子模块管理、Volantis 子仓库嵌套、字体本地化路径、Hexo 部署分支等。也收获很多： 将博客部署到 gh-pages 分支，主仓库保持干净 美化 Logo、背景、图标统一风格 替换外部依赖为本地资源，提升加载速度 自动化开发环境，大幅提升效率 🌐 博客地址：https://ai.he0xwhale.xyz","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ai.he0xwhale.xyz/tags/Volantis/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"https://ai.he0xwhale.xyz/tags/GitHub-Pages/"},{"name":"博客美化","slug":"博客美化","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"},{"name":"AI编程","slug":"AI编程","permalink":"https://ai.he0xwhale.xyz/tags/AI%E7%BC%96%E7%A8%8B/"},{"name":"吉卜力风","slug":"吉卜力风","permalink":"https://ai.he0xwhale.xyz/tags/%E5%90%89%E5%8D%9C%E5%8A%9B%E9%A3%8E/"}]}],"categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"开发实战","slug":"开发实战","permalink":"https://ai.he0xwhale.xyz/categories/%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98/"},{"name":"SEO","slug":"博客搭建/SEO","permalink":"https://ai.he0xwhale.xyz/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/SEO/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ai.he0xwhale.xyz/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ai.he0xwhale.xyz/tags/Volantis/"},{"name":"Markdown","slug":"Markdown","permalink":"https://ai.he0xwhale.xyz/tags/Markdown/"},{"name":"Bug排查","slug":"Bug排查","permalink":"https://ai.he0xwhale.xyz/tags/Bug%E6%8E%92%E6%9F%A5/"},{"name":"VSCode","slug":"VSCode","permalink":"https://ai.he0xwhale.xyz/tags/VSCode/"},{"name":"Cursor","slug":"Cursor","permalink":"https://ai.he0xwhale.xyz/tags/Cursor/"},{"name":"插件开发","slug":"插件开发","permalink":"https://ai.he0xwhale.xyz/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"},{"name":"踩坑记录","slug":"踩坑记录","permalink":"https://ai.he0xwhale.xyz/tags/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"},{"name":"SEO","slug":"SEO","permalink":"https://ai.he0xwhale.xyz/tags/SEO/"},{"name":"OpenGraph","slug":"OpenGraph","permalink":"https://ai.he0xwhale.xyz/tags/OpenGraph/"},{"name":"结构化数据","slug":"结构化数据","permalink":"https://ai.he0xwhale.xyz/tags/%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/"},{"name":"搜索引擎优化","slug":"搜索引擎优化","permalink":"https://ai.he0xwhale.xyz/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/"},{"name":"字数统计","slug":"字数统计","permalink":"https://ai.he0xwhale.xyz/tags/%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/"},{"name":"博客封面图","slug":"博客封面图","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E5%B0%81%E9%9D%A2%E5%9B%BE/"},{"name":"实践记录","slug":"实践记录","permalink":"https://ai.he0xwhale.xyz/tags/%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"},{"name":"插图","slug":"插图","permalink":"https://ai.he0xwhale.xyz/tags/%E6%8F%92%E5%9B%BE/"},{"name":"博客技巧","slug":"博客技巧","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%8A%80%E5%B7%A7/"},{"name":"博客页面","slug":"博客页面","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2/"},{"name":"分类标签","slug":"分类标签","permalink":"https://ai.he0xwhale.xyz/tags/%E5%88%86%E7%B1%BB%E6%A0%87%E7%AD%BE/"},{"name":"友链页面","slug":"友链页面","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8F%8B%E9%93%BE%E9%A1%B5%E9%9D%A2/"},{"name":"评论系统","slug":"评论系统","permalink":"https://ai.he0xwhale.xyz/tags/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"},{"name":"Giscus","slug":"Giscus","permalink":"https://ai.he0xwhale.xyz/tags/Giscus/"},{"name":"GitHub Discussions","slug":"GitHub-Discussions","permalink":"https://ai.he0xwhale.xyz/tags/GitHub-Discussions/"},{"name":"标题序号","slug":"标题序号","permalink":"https://ai.he0xwhale.xyz/tags/%E6%A0%87%E9%A2%98%E5%BA%8F%E5%8F%B7/"},{"name":"博客规范","slug":"博客规范","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E8%A7%84%E8%8C%83/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"https://ai.he0xwhale.xyz/tags/GitHub-Pages/"},{"name":"博客美化","slug":"博客美化","permalink":"https://ai.he0xwhale.xyz/tags/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"},{"name":"AI编程","slug":"AI编程","permalink":"https://ai.he0xwhale.xyz/tags/AI%E7%BC%96%E7%A8%8B/"},{"name":"吉卜力风","slug":"吉卜力风","permalink":"https://ai.he0xwhale.xyz/tags/%E5%90%89%E5%8D%9C%E5%8A%9B%E9%A3%8E/"}]}